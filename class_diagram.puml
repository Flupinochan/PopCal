@startuml
!theme plain
skinparam backgroundColor #FAFAFA
skinparam packageBorderColor #333333
skinparam packageBackgroundColor #F8F9FA
skinparam classBorderColor #666666
skinparam classBackgroundColor #FFFFFF
skinparam interfaceBackgroundColor #E3F2FD
skinparam abstractBackgroundColor #FFF3E0
skinparam linetype splines
skinparam roundcorner 10
skinparam shadowing false

package "Domain Layer" #E8F5E8 {
  class AppUser {
    +String uid
    +String email
    +AppUser(uid, email)
  }
  
  interface AuthRepository <<interface>> {
    +Stream<Result<AppUser?>> authStateChanges
    +Future<Result<AppUser?>> getUser()
    +Future<Result<AppUser?>> signInWithEmailAndPassword(email, password)
    +Future<Result<void>> signOut()
    +Future<Result<AppUser?>> signUpWithEmailAndPassword(email, password)
  }
}

package "Data Layer" #E3F2FD {
  class UserDto {
    +String uid
    +String? email
    +UserDto(uid, email)
    +UserDto.fromFirebaseUser(firebaseUser)
    +UserDto.fromJson(json)
    +Map<String, dynamic> toJson()
    +AppUser toEntity()
  }
  
  class EmailSignInRequestDto {
    +String email
    +String password
    +EmailSignInRequestDto(email, password)
    +EmailSignInRequestDto.fromJson(json)
    +Map<String, dynamic> toJson()
  }
  
  class FirebaseAuthDataSource {
    -FirebaseAuth _firebaseAuth
    +FirebaseAuthDataSource(firebaseAuth)
    +Stream<Result<UserDto?>> authStateChanges
    +Future<Result<UserDto?>> getUser()
    +Future<Result<UserDto>> signInWithEmailAndPassword(email, password)
    +Future<Result<void>> signOut()
    +Future<Result<UserDto>> signUpWithEmailAndPassword(email, password)
    -String _mapFirebaseError(error)
  }
  
  class AuthRepositoryFirebase {
    +FirebaseAuthDataSource firebaseAuthDataSource
    +AuthRepositoryFirebase(firebaseAuthDataSource)
  }
}

package "Presentation Layer" #FFF3E0 {
  class LoginScreen {
    -bool _isPasswordVisible
    -String _selectedMode
    -GlobalKey<FormState> _formKey
    -String _email
    -String _password
    -EmailSignInValidator _emailSignInValidator
    +void _handleSignIn()
    +void _handleSignUp()
    +void _showErrorDialog(message)
  }
  
  class AuthController {
    +FutureOr<AppUser?> build()
    +Future<Result<AppUser?>> signIn(email, password)
    +Future<Result<AppUser?>> signUp(email, password)
    +Future<Result<void>> signOut()
  }
  
  class EmailSignInValidator {
    +Result<String> validateEmail(value)
    +Result<String> validatePassword(value)
  }
  
  class CurrentUser {
    +Future<Result<AppUser?>> build()
    +void _setupAuthListener()
  }
  
  class DrawerScreen {
    +void _showSignOutDialog(context)
  }
  
  class HomeScreen {
    +Widget build(context)
  }
}

' === DATA LAYER → DOMAIN LAYER の依存 ===
AuthRepositoryFirebase .up.|> AuthRepository : implements
UserDto .up.> AppUser : converts to
FirebaseAuthDataSource .up.> UserDto : creates

' === PRESENTATION LAYER → DOMAIN LAYER の依存 ===
AuthController .up.> AuthRepository : uses
CurrentUser .up.> AuthRepository : uses

' === PRESENTATION LAYER 内部の依存（同一レイヤー内） ===
LoginScreen --> AuthController : uses
LoginScreen --> EmailSignInValidator : uses
DrawerScreen --> CurrentUser : watches

' === DATA LAYER 内部の依存（同一レイヤー内） ===
AuthRepositoryFirebase --> FirebaseAuthDataSource : uses

' 依存の方向を明確にする注釈
note top of "Domain Layer" : **独立レイヤー**\n他のレイヤーに依存しない
note left of "Data Layer" : **Domain に依存**\nPresentation には依存しない
note right of "Presentation Layer" : **Domain に依存**\nData には依存しない

' レイヤー間の依存方向を示す矢印
"Data Layer" .up.> "Domain Layer" : depends on
"Presentation Layer" .up.> "Domain Layer" : depends on

@enduml