@startuml Flutter_Clean_Architecture_Auth

!define DOMAIN_COLOR #E1F5FE
!define DATA_COLOR #FFF3E0  
!define PRESENTATION_COLOR #E8F5E8

skinparam packageStyle rectangle
skinparam rectangle {
    roundCorner 15
    shadowing true
}

skinparam arrow {
    thickness 2
    color #333333
}

package "Presentation Layer" PRESENTATION_COLOR {
    rectangle "UI & ViewModels" {
        class LoginScreen {
            -bool _isPasswordVisible
            -String _selectedMode
            -GlobalKey<FormState> _formKey
            +_handleSignIn(): void
            +_handleSignUp(): void
            +build(): Widget
        }
        
        class AuthViewModel {
            -String _email
            -String _password
            +updateEmail(): void
            +updatePassword(): void
            +signIn(): Future<Result<AppUser?>>
            +signUp(): Future<Result<AppUser?>>
            +signOut(): Future<Result<void>>
        }
        
        class EmailSignInValidator {
            +validateEmail(): Result<String>
            +validatePassword(): Result<String>
        }
    }
}

package "Domain Layer" DOMAIN_COLOR {
    rectangle "Business Logic" {
        class AppUser {
            +String uid
            +String email
        }
        
        interface AuthRepository {
            +authStateChanges: Stream<Result<AppUser?>>
            +getUser(): Future<Result<AppUser?>>
            +signInWithEmailAndPassword(): Future<Result<AppUser?>>
            +signOut(): Future<Result<void>>
            +signUpWithEmailAndPassword(): Future<Result<AppUser?>>
        }
    }
}

package "Data Layer" DATA_COLOR {
    rectangle "Data Sources & DTOs" {
        class UserDto {
            +String uid
            +String? email
            +fromFirebaseUser(): UserDto
            +toEntity(): AppUser
            +toJson(): Map<String, dynamic>
        }
        
        class EmailSignInRequestDto {
            +String email
            +String password
            +fromJson(): EmailSignInRequestDto
            +toJson(): Map<String, dynamic>
        }
        
        class FirebaseAuthDataSource {
            -FirebaseAuth _firebaseAuth
            +authStateChanges: Stream<Result<UserDto?>>
            +getUser(): Future<Result<UserDto?>>
            +signInWithEmailAndPassword(): Future<Result<UserDto>>
            +signOut(): Future<Result<void>>
            +signUpWithEmailAndPassword(): Future<Result<UserDto>>
        }
        
        class AuthRepositoryFirebase {
            +FirebaseAuthDataSource firebaseAuthDataSource
            +authStateChanges: Stream<Result<AppUser?>>
            +getUser(): Future<Result<AppUser?>>
            +signInWithEmailAndPassword(): Future<Result<AppUser?>>
            +signOut(): Future<Result<void>>
            +signUpWithEmailAndPassword(): Future<Result<AppUser?>>
        }
    }
}

' 依存関係の矢印
AuthViewModel --> AuthRepository : depends on
LoginScreen --> AuthViewModel : uses
LoginScreen --> EmailSignInValidator : uses

AuthRepositoryFirebase ..|> AuthRepository : implements
AuthRepositoryFirebase --> FirebaseAuthDataSource : uses
UserDto --> AppUser : converts to

' 外部依存
FirebaseAuthDataSource --> "Firebase Auth" : external

note top of "Domain Layer"
**Domain Layer (最内層)**
- ビジネスエンティティ
- リポジトリインターフェース
- 外部依存なし
- 純粋なDartコード
end note

note top of "Data Layer"
**Data Layer (中間層)**
- データ取得・保存の実装
- 外部APIとの通信
- DTOによるデータ変換
- Domainレイヤーに依存
end note

note top of "Presentation Layer"
**Presentation Layer (外層)**
- UI表示とユーザー操作
- 状態管理
- 入力値検証
- Domainレイヤーに依存
end note

note right of AuthViewModel
ViewModelは具象クラスではなく
AuthRepositoryインターフェース
に依存することで疎結合を実現
end note

note right of UserDto
DTOはFirebaseの
User型をAppUser
エンティティに変換
end note

@enduml